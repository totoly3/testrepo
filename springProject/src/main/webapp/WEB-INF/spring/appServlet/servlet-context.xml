<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- DispatcherServlet이 알아야 할 설정들을 등록하는 공간  -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!--아래는 @Controller 와 같은 어노테이션을 활성화 해주는 설정 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	
	<!--아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 아래는 
		 주소 자동완성 도구 등록
		매번/WEB-INF/views / 라는 경로를 작성하기 번거롭기 때문에 미리 선언해두면 요청이 응답될때 자동완성되어 실행된다. 
		ViewResolver라는 도구를 등록하는것.
		-> class : 패키지 경로를 포함한 ViewRelver 의 전체 경로 
		-> prefix : 접두어 
		-> suffix : 접미사 
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		아래는 base-package에 설정된 패키지와 그 이하 패키지를 전 부 스캔하여 등록 가능한 도구 (COmponet )를 찾아서등록하겠다 라는 설정	
	 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- 
		사용자가 어떤 url 로 요청시 해당문서가 읽혀진다 
		HandlerMapping 을 통해서 어더한 url 로 요청시 구동시켜질 Controller 를 알아내야한다 .
		-요청에 맞는 Controller 가 실행되도록 . 
		
		1. 요청할떄마다 실행될 Controller 클래스들이 Bean으로 등록 되어있다 .]
		<beans:bean class="com.kh.spring.member.controller.MemberLoginController" id="loginController"/>

		2. 어떤 url 요청 시 어던 Controller를 구동시킬것인지 매핑시키는 HandlerMapping 관련한 클래스를 Bean으로 등록해야한다.
		<beans:bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"/>
			<beans:property name="mapping">
					<beans:prop key ="login.me">loginController</beans:prop>
					<beans:prop key ="logOut.me">logOutController </beans:prop>
				</beans:property>
			</beans:bean>	
			
			위에는 예전 방식들이었음 
	
			-장점 : xml 문서 내에서 한번에 정리되어 보여지기 때문에 관리의 편의성이 높다 
			-단점 : bean 개수가 많아지면 관리가 어려워진다 . 또한 여러개발자가 같은 xml 파일을 수정하게되면 ㅍ충돌이 발생할수있다.
			
			어노테이션 등록 방식 ex)Controller
			-> component-scan 에서 지정한 패키지와 하위 패키지를 스캔하여 어노테이션이 붙은 클래스들을 자동으로 bean등록 시켜주는 방식 
			
			단 내가 직접 만든 클래스가 아니녕우 컴파일된 class파일 형태로 배포되기 때문에 
			소스코드 내부를 볼수 없고 수정도 불가하기 때문에 어노테이션 방식이 아닌 xml방식으로 등록해서 사용해야한다 .
	 -->
	 
	 <!--  내가 작성한 인터셉터가 어떠한 매핑에서 실행될것인지 설정해줘야한다 .  -->
	 <interceptors>
	 	<interceptor>
	 		<mapping path="/mypage.me"/>
	 		<mapping path="/update.me"/>
	 		<mapping path="/insert.bo"/>
<!-- 	 		<mapping path="/*.me"/>  한번에  me 들어간거 다 처리하기-->
	 		
	 		<beans:bean class="com.kh.spring.common.LoginInterceptor" id="loginInterceptor"/>
	 	</interceptor>
	 </interceptors>
</beans:beans>
